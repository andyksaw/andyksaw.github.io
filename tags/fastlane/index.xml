<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>fastlane on andysaw</title><link>https://andyksaw.github.io/tags/fastlane/</link><description>Recent content in fastlane on andysaw</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 10 Jan 2023 11:23:00 +0900</lastBuildDate><atom:link href="https://andyksaw.github.io/tags/fastlane/index.xml" rel="self" type="application/rss+xml"/><item><title>Force-sync your Flutter and iOS versions</title><link>https://andyksaw.github.io/posts/fastlane/sync-flutter-and-ios-versions/</link><pubDate>Tue, 10 Jan 2023 11:23:00 +0900</pubDate><guid>https://andyksaw.github.io/posts/fastlane/sync-flutter-and-ios-versions/</guid><description>While iOS app distribution can already be a challenge on its own, Flutter is a black box wrapping around that to add an extra level of undocumented pain.
Just like regular iOS development, we can apply Fastlane to automate our app distribution pipeline, but there&amp;rsquo;s plenty of unexpected hiccups that happen along the way. Flutter being a cross-platform development solution however, it tries to abstract away differences in the platforms at the cost of some black magic.</description><content:encoded><![CDATA[<p>While iOS app distribution can already be a challenge on its own, Flutter is a black box wrapping around that to add an extra level of <em>undocumented pain</em>.</p>
<p>Just like regular iOS development, we can apply Fastlane to automate our app distribution pipeline, but there&rsquo;s plenty of unexpected hiccups that happen along the way. Flutter being a cross-platform development solution however, it tries to abstract away differences in the platforms at the cost of some black magic.</p>
<p>One particularly annoying issue I faced is that the version I defined for my Flutter app was often different to what the iOS app claimed it to be.</p>
<h2 id="the-source-of-truth">The Source of Truth</h2>
<p>As a quick recap on how Flutter&rsquo;s versioning works, we define our Flutter app&rsquo;s version in the <code>pubspec.yaml</code> file.</p>
<p>It expects <a href="https://semver.org/">semantic versioning</a>, and a build number.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-dart" data-lang="dart"><span class="line"><span class="cl"><span class="nl">version:</span> <span class="m">1.2</span><span class="p">.</span><span class="m">3</span><span class="o">+</span><span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Major = 1
</span></span></span><span class="line"><span class="cl"><span class="c1">// Minor = 2
</span></span></span><span class="line"><span class="cl"><span class="c1">// Patch = 3
</span></span></span><span class="line"><span class="cl"><span class="c1">// Build = 4
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>The value defined here is automatically used by the iOS and Android app built for us by Flutter.</p>
<p>For iOS, this becomes like so:</p>
<table>
<thead>
<tr>
<th><code>Info.plist</code> Raw Key</th>
<th>Description</th>
<th>Value Based on Above Example</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>CFBundleShortVersionString</code></td>
<td>Version string</td>
<td><code>1.2.3</code></td>
</tr>
<tr>
<td><code>CFBundleVersion</code></td>
<td>Build number</td>
<td><code>4</code></td>
</tr>
</tbody>
</table>
<ul>
<li>The version string (<code>major</code>.<code>minor</code>.<code>patch</code>) is the public-facing version. People can see this on the App Store.</li>
<li>The build number on the other hand is mainly for distribution platforms to differentiate between multiple copies of your app that have the same version string.
<ul>
<li>For example, it&rsquo;s very common in large teams to have a pipeline that automatically distributes your app to developers/internal testers whenever a commit is pushed to the main branch. In such a system, developers push many changes under the same version string before a new version is released. Each change automatically increments the build number so that the uploaded version is unique in the eyes of the distribution platform.</li>
<li>This is important to note because some distribution platforms like <a href="https://developer.apple.com/testflight/">TestFlight</a> will not allow you to upload your app if the version string &amp; build number combination has already been uploaded for your app identifier.</li>
</ul>
</li>
</ul>
<p>In Flutter land, <code>pubspec.yaml</code> is our source of truth in the sense that each platform (iOS, Android) will receive the version defined in that file when building the app, as opposed to each platform defining the versions themselves and duplicating these values all over the place.</p>
<h2 id="how-does-ios-get-the-flutter-version">How does iOS get the Flutter version?</h2>
<p>Flutter generates two files for us in the <code>ios/Flutter</code> folder:</p>
<ol>
<li><code>flutter_export_environment.sh</code></li>
<li><code>Generated.xcconfig</code></li>
</ol>
<p>These are essentially a Key-Value map of build settings - two of which are of particular interest:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">// Generated.xcconfig
</span></span><span class="line"><span class="cl"><span class="nv">FLUTTER_BUILD_NAME</span><span class="o">=</span>1.2.3
</span></span><span class="line"><span class="cl"><span class="nv">FLUTTER_BUILD_VERSION</span><span class="o">=</span><span class="m">4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">// flutter_export_environment.sh
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="s2">&#34;FLUTTER_BUILD_NAME=1.2.3&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="s2">&#34;FLUTTER_BUILD_VERSION=4&#34;</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Flutter takes the version in <code>pubspec.yaml</code> and generates these two files with the version string (amongst other things).</p>
<p><code>Generated.xcconfig</code> is an <em>Xcode build configuration file</em> that is read during compile-time when building the iOS app. These build settings are loaded into the project during compilation as if they had been declared in the <code>xcodeproj</code>.</p>
<blockquote>
<p>Check out <a href="https://nshipster.com/xcconfig/">here</a> if you&rsquo;re interested to see more on what <code>xcconfig</code> files can do</p>
</blockquote>
<p>As mentioned before, the version string is read from the <code>CFBundleShortVersionString</code> and <code>CFBundleVersion</code> keys inside <code>Info.plist</code> and bundled with the app. Unlike a conventional iOS app however, these point to the value received from <code>Generated.xcconfig</code> rather than a hardcoded value.</p>
<p>Quite a lot of misdirection, but at least it gets the job done.</p>
<p>&hellip; usually.</p>
<h2 id="so-whats-the-problem">So what&rsquo;s the problem?</h2>
<p>There&rsquo;s two ways to compile/run the iOS app:</p>
<ol>
<li>Run the <code>flutter build</code> command in CLI</li>
<li>OR open Xcode and compile the app</li>
</ol>
<p>Regardless of which way you choose, the versions will still be pulled out of <code>Generated.xcconfig</code> at compile-time.</p>
<p>Great! &hellip; but actually it turns out that the two files (<code>flutter_export_environment.sh</code> and <code>Generated.xcconfig</code>) are <strong>only generated when using the <code>flutter build</code> command</strong>. And therein lies the problem with the Flutter black box.</p>
<p>In other words, if you change the version in <code>pubspec.yaml</code> and then compile the app with Xcode, the bundled version will still be the old version because this process is not managed by Flutter.</p>
<p>It&rsquo;s a fairly common scenario and I&rsquo;m very surprised there isn&rsquo;t any ruckus about it. In the past I&rsquo;ve accidentally pushed an app labelled with the wrong version to TestFlight before due to this issue, and there&rsquo;s no way to delete it other than to &ldquo;expire&rdquo; the build. Annoying.</p>
<h1 id="the-solution">The Solution</h1>
<p>I must preface this by saying this is a hacky workaround. We&rsquo;re tampering with generated files, and that always bears the risk of breaking in a future update of Flutter. That being said, this solution works for me and the trade-off is worth the risk. YMMV.</p>
<p>Basically, we will want to overwrite the version values written in the two generated files (<code>flutter_export_environment.sh</code> and <code>Generated.xcconfig</code>) before compiling the iOS app.</p>
<p>There&rsquo;s many ways to achieve this: a bash script, a git hook, a run script (for your xcodeproj) and more. Since I&rsquo;m already using Fastlane to automate app distribution, I decided to write a <a href="https://docs.fastlane.tools/create-action/">custom Fastlane action</a>.</p>
<h2 id="custom-fastlane-action">Custom Fastlane Action</h2>
<p>Create a new Fastlane action using the <code>fastlane new_action</code> command, and give it a name. For our intents and purposes, I named it <code>sync_ios_with_pubspec_version</code>.</p>
<p>Next we&rsquo;ll write a Ruby script to read the version from the <code>pubspec.yaml</code> file, and overwrite the values in the two generated files.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="nb">require</span> <span class="s1">&#39;yaml&#39;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">module</span> <span class="nn">Fastlane</span>
</span></span><span class="line"><span class="cl">  <span class="k">module</span> <span class="nn">Actions</span>
</span></span><span class="line"><span class="cl">    <span class="k">class</span> <span class="nc">SyncIosWithPubspecVersionAction</span> <span class="o">&lt;</span> <span class="no">Action</span>
</span></span><span class="line"><span class="cl">      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">run</span><span class="p">(</span><span class="n">params</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">yaml</span> <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s2">&#34;pubspec.yaml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">version</span> <span class="o">=</span> <span class="n">yaml</span><span class="o">[</span><span class="s2">&#34;version&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        
</span></span><span class="line"><span class="cl">        <span class="n">matches</span> <span class="o">=</span> <span class="sr">/^(\d+)\.(\d+)\.(\d+)\+(\d+)$/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">version</span><span class="p">)</span><span class="o">.</span><span class="n">captures</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">major</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">minor</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">patch</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="n">build</span> <span class="o">=</span> <span class="n">matches</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="n">pubspsec_version</span> <span class="o">=</span> <span class="s2">&#34;</span><span class="si">#{</span><span class="n">major</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">minor</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">patch</span><span class="si">}</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">        <span class="o">[</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;ios/Flutter/flutter_export_environment.sh&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">          <span class="s2">&#34;ios/Flutter/Generated.xcconfig&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="o">]</span>
</span></span><span class="line"><span class="cl">        <span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">file_name</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">          <span class="n">edited_data</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">file_name</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">            <span class="n">f</span><span class="o">.</span><span class="n">read</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/FLUTTER_BUILD_NAME=[\d\.]+/</span><span class="p">,</span> <span class="s2">&#34;FLUTTER_BUILD_NAME=</span><span class="si">#{</span><span class="n">pubspsec_version</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">              <span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/FLUTTER_BUILD_NUMBER=\d+/</span><span class="p">,</span> <span class="s2">&#34;FLUTTER_BUILD_NUMBER=</span><span class="si">#{</span><span class="n">build</span><span class="si">}</span><span class="s2">&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">          <span class="k">end</span>
</span></span><span class="line"><span class="cl">          <span class="no">IO</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">edited_data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">end</span>
</span></span><span class="line"><span class="cl">      <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">description</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;Forces the iOS app&#39;s version to be overwritten with the value in pubspec.yaml&#34;</span>
</span></span><span class="line"><span class="cl">      <span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">      <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">is_supported?</span><span class="p">(</span><span class="n">platform</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="n">platform</span> <span class="o">==</span> <span class="ss">:ios</span>
</span></span><span class="line"><span class="cl">      <span class="k">end</span>
</span></span><span class="line"><span class="cl">    <span class="k">end</span>
</span></span><span class="line"><span class="cl">  <span class="k">end</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Finally, we just need to invoke our new custom action from any <code>Fastfile</code> lane that builds the app. This will ensure the version is always synced.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="hl"><span class="lnt">2
</span></span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">lane</span> <span class="ss">:beta</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line hl"><span class="cl">    <span class="n">sync_ios_with_pubspec_version</span>
</span></span><span class="line"><span class="cl">    <span class="n">build_app</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">upload_to_testflight</span><span class="p">(</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Not exactly elegant, but at least the problem is solved for now.</p>
]]></content:encoded></item><item><title>Migrating to Fastlane (Part 1)</title><link>https://andyksaw.github.io/posts/migrate-to-fastlane/part-1-api-key/</link><pubDate>Thu, 06 Jan 2022 23:00:26 +0900</pubDate><guid>https://andyksaw.github.io/posts/migrate-to-fastlane/part-1-api-key/</guid><description>App releases, app distribution and general day-to-day development is full of laborious, manual tasks that squander our time. For iOS developers, Fastlane is an invaluable tool that can help automate away most of this.
It&amp;rsquo;s super easy to integrate into your workflow - that is, unless you find yourself with an app that has already seen multiple, manually-performed releases. I found myself in said situation recently, banging my head in frustration at the lack of documentation regarding this.</description><content:encoded><![CDATA[<p>App releases, app distribution and general day-to-day development is full of laborious, manual tasks that squander our time. For iOS developers, Fastlane is an invaluable tool that can help automate away most of this.</p>
<p>It&rsquo;s super easy to integrate into your workflow - that is, unless you find yourself with an app that has already seen multiple, manually-performed releases. I found myself in said situation recently, banging my head in frustration at the lack of documentation regarding this. Fastlane is simple if you add it in from the beginning (and most guides assume you&rsquo;ll be doing so), but full of landmines later if you don&rsquo;t.</p>
<p>This series of posts outlines the process I went through and the various caveats I discovered along the way. By the end of it, we&rsquo;ll have an automated app-release pipeline that we can be proud of.</p>
<h2 id="the-roadmap">The Roadmap</h2>
<ul>
<li>Part 1 - <a href="/posts/migrate-to-fastlane-1-api-key/">App Store Connect API Key for authentication</a></li>
<li>Part 2 - Storing certificates/profiles in a GCP Bucket</li>
<li>Part 3 - Reusing existing certificates, profiles and keys</li>
<li>Part 4 - Migrating to manual app signing</li>
<li>Part 5 - Provisioning Profile device list</li>
<li>Part 6 - Uploading to TestFlight</li>
<li>Part 7 - Reducing secrets sprawl</li>
</ul>
<hr>
<h1 id="part-1---app-store-connect-key">Part 1 - App Store Connect Key</h1>
<p>We&rsquo;ll start off with the lowest hanging fruit: switching our API authentication to using a private key.</p>
<p>Any operation performed by Fastlane that involves the App Store (eg. submitting to TestFlight, releasing the app) or certificates/profiles (eg. downloading, updating, etc) requires authentication to prove that you are allowed to do so.</p>
<h2 id="credentials-a-world-of-pain">Credentials: A World of Pain</h2>
<p>If you&rsquo;ve been releasing your app manually, you&rsquo;ll be familiar with logging-in to App Store Connect with your email address and password in the browser.</p>
<p>Fastlane emulates that (cookie-based web session) authentication by default, using an unofficial version of the App Store Connect API. Performance and stability reasons aside, it is <strong>not recommended due to enforced Two Factor Authentication</strong>. In other words, the app owner&rsquo;s account must have (Apple&rsquo;s) 2FA enabled. If you are not said person and need to perform an app release, you will need to pester them often for a generated 2FA code.</p>
<p>For the same reason, CI/CD will not be possible using this method as we can&rsquo;t (feasibly) input the ever-changing 2FA code.</p>
<p>Frustrating? Yes. Let&rsquo;s fix that first for our sanity.</p>
<h2 id="private-key-the-better-way">Private Key: The Better Way</h2>
<p>The recommended approach is to use the official <a href="https://developer.apple.com/app-store-connect/api/">App Store Connect JSON API</a>, and authenticate using a JSON Web Token (JWT). All of that is taken care of by Fastlane under the hood, provided that we pass it a private key that can be used to generate said token.</p>
<p>More importantly, by using the official API we will not be prompted for a 2FA code.</p>
<h3 id="generating-the-key">Generating the Key</h3>
<p>A token can be generated on App Store Connect.</p>
<p>WIP</p>
<blockquote>
<p>⚠️ Your account must have the <strong>Admin</strong> role to generate a token (or even see a link to the page). The <strong>App Owner</strong> role is not sufficient.</p>
</blockquote>
<blockquote>
<p>🤯 App Store Connect occasionally has weird caching issues. If your role was just updated to Admin but you still don&rsquo;t see the tab to create the token, try logout of App Store Connect and restart the browser.</p>
</blockquote>
<p>Let&rsquo;s download the <code>.p8</code> key file. Assuming your Fastlane files are stored in a <code>fastlane</code> folder, we should place the key in the parent of this folder.</p>
<pre tabindex="0"><code>app/
├── app_store_connect_api_key.p8
└── fastlane/
    └── Fastfile
</code></pre><p><strong>Do not commit the key to your repository</strong>, and be sure to add it to your <code>.gitignore</code> file.</p>
<p>As with any private key or token, you must take care who has access to it, as it grants the holder admin permissions to the API.</p>
<h3 id="using-the-key">Using the Key</h3>
<p>From there it&rsquo;s a matter of calling the <code>app_store_connect_api_key</code> action in your <code>Fastfile</code>.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="hl"><span class="lnt">2
</span></span><span class="hl"><span class="lnt">3
</span></span><span class="hl"><span class="lnt">4
</span></span><span class="hl"><span class="lnt">5
</span></span><span class="hl"><span class="lnt">6
</span></span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">lane</span> <span class="ss">:beta</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line hl"><span class="cl">  <span class="n">app_store_connect_api_key</span><span class="p">(</span>
</span></span><span class="line hl"><span class="cl">    <span class="ss">key_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_KEY_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line hl"><span class="cl">    <span class="ss">issuer_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_ISSUER_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line hl"><span class="cl">    <span class="ss">key_filepath</span><span class="p">:</span> <span class="s2">&#34;app_store_connect_api_key.p8&#34;</span>
</span></span><span class="line hl"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="n">upload_to_testflight</span> <span class="c1"># This action needs the token</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Anything that requires interaction with App Store Connect (eg. TestFlight, registering devices with match, generating certs with match), will require a call to the <code>app_store_connect_api_key</code> action first.</p>
<p>The action will return a dictionary/hash map containing the JWT Token. Technically we could pass the returned value as a parameter to each action that requires the token, but I find that totally unnecessary. The action automatically puts the key into the context, so <strong>you don’t need to do anything further</strong>.</p>
<p>There&rsquo;s many approaches to how you can do this. Personally, I prefer to create a lane for injecting the key and switch to that lane when another lane requires the key.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="hl"><span class="lnt">10
</span></span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">lane</span> <span class="ss">:setup_app_store_connect_key</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line"><span class="cl">  <span class="n">app_store_connect_api_key</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="ss">key_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_KEY_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="ss">issuer_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_ISSUER_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="ss">key_filepath</span><span class="p">:</span> <span class="s2">&#34;app_store_connect_api_key.p8&#34;</span>
</span></span><span class="line"><span class="cl">  <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">lane</span> <span class="ss">:beta</span> <span class="k">do</span> <span class="o">|</span><span class="n">options</span><span class="o">|</span>
</span></span><span class="line hl"><span class="cl">  <span class="n">setup_app_store_connect_key</span>
</span></span><span class="line"><span class="cl">  <span class="n">upload_to_testflight</span>
</span></span><span class="line"><span class="cl"><span class="k">end</span>
</span></span></code></pre></td></tr></table>
</div>
</div><p>Great! We&rsquo;re now using the key for authentication when running Fastlane locally.</p>
<h2 id="cicd">CI/CD</h2>
<p>In CI/CD, we won’t have the <code>p8</code> file since it’s not pushed to the repository, and assuming you&rsquo;re using GitHub Actions, we cannot upload the key file.</p>
<p>The solution is to store the contents of the key as a GitHub secret, and then inject it.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="hl"><span class="lnt">4
</span></span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">app_store_connect_api_key</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="ss">key_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_KEY_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="ss">issuer_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_ISSUER_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line hl"><span class="cl">  <span class="ss">key_content</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_KEY_CONTENT&#34;</span><span class="o">]</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="hl"><span class="lnt">4
</span></span><span class="hl"><span class="lnt">5
</span></span><span class="hl"><span class="lnt">6
</span></span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-yaml" data-lang="yaml"><span class="line"><span class="cl">- <span class="nt">name</span><span class="p">:</span><span class="w"> </span><span class="l">Register new devices</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">run</span><span class="p">:</span><span class="w"> </span><span class="l">fastlane ios register_new_devices</span><span class="w">
</span></span></span><span class="line"><span class="cl"><span class="w">  </span><span class="nt">env</span><span class="p">:</span><span class="w">
</span></span></span><span class="line hl"><span class="cl"><span class="w">    </span><span class="nt">ASC_API_KEY_ID</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.ASC_API_KEY_ID }}</span><span class="w">
</span></span></span><span class="line hl"><span class="cl"><span class="w">    </span><span class="nt">ASC_API_ISSUER_ID</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.ASC_API_ISSUER_ID }}</span><span class="w">
</span></span></span><span class="line hl"><span class="cl"><span class="w">    </span><span class="nt">ASC_API_KEY_CONTENT</span><span class="p">:</span><span class="w"> </span><span class="l">${{ secrets.ASC_API_KEY_CONTENT }}</span><span class="w">
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>That being said, we don&rsquo;t always want to have to inject the key contents. When running Fastlane on your own development machine you&rsquo;ll have the key as a file rather than as an environment variable.</p>
<p>Luckily, we can make use of the in-built <code>is_ci</code> action to check if we’re in a CI/CD environment.</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="hl"><span class="lnt">4
</span></span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-ruby" data-lang="ruby"><span class="line"><span class="cl"><span class="n">app_store_connect_api_key</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="ss">key_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_KEY_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">  <span class="ss">issuer_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_ISSUER_ID&#34;</span><span class="o">]</span><span class="p">,</span>
</span></span><span class="line hl"><span class="cl">  <span class="ss">key_content</span><span class="p">:</span> <span class="n">is_ci</span> <span class="p">?</span> <span class="no">ENV</span><span class="o">[</span><span class="s2">&#34;ASC_API_KEY_CONTENT&#34;</span><span class="o">]</span> <span class="p">:</span> <span class="s2">&#34;app_store_connect_api_key.p8&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></content:encoded></item></channel></rss>